// Copyright (c) Microsoft. All rights reserved.

// This sample shows how to create and use a simple AI agent with Azure OpenAI as the backend.

using System;
using Azure.AI.OpenAI;
using Azure.Identity;
using Microsoft.Agents.Declarative;
using Microsoft.Extensions.AI;

var endpoint = Environment.GetEnvironmentVariable("AZURE_OPENAI_ENDPOINT") ?? throw new InvalidOperationException("AZURE_OPENAI_ENDPOINT is not set.");
var deploymentName = Environment.GetEnvironmentVariable("AZURE_OPENAI_DEPLOYMENT_NAME") ?? "gpt-4o-mini";

// Create the chat client
IChatClient chatClient = new AzureOpenAIClient(
    new Uri(endpoint),
    new AzureCliCredential())
     .GetOpenAIResponseClient(deploymentName)
     .AsIChatClient();

// Define the agent using a YAML definition.
var text =
    """
    kind: GptComponentMetadata
    type: chat_client_agent
    name: CoderAgent
    description: Coder Agent
    instructions: You write code to solve problems.
    tools:
      - type: code_interpreter
        options:
          container:
            type: auto
    """;

// Create the agent from the YAML definition.
var agentFactory = new ChatClientAgentFactory();
var agent = await agentFactory.CreateFromYamlAsync(text, new() { ChatClient = chatClient });

// Invoke the agent and output the text result.
var response = await agent!.RunAsync("Use code to determine the values in the Fibonacci sequence that that are less then the value of 101?");
Console.WriteLine(response.Text);

// Extract the code generated by code interpreter tool
/*
var chatResponse = response.RawRepresentation as ChatResponse;
StringBuilder generatedCode = new();
foreach (object? updateRawRepresentation in chatResponse?.RawRepresentation as IEnumerable<object?> ?? [])
{
    if (updateRawRepresentation is RunStepDetailsUpdate update && update.CodeInterpreterInput is not null)
    {
        generatedCode.Append(update.CodeInterpreterInput);
    }
}
Console.WriteLine($"\nGenerated Code:\n{generatedCode}");
*/
