// Copyright (c) Microsoft. All rights reserved.

using Microsoft.Extensions.AI;
using Microsoft.Extensions.AI.Agents;
using Microsoft.Shared.Diagnostics;
using OpenAI.Chat;
using OpenAI.Responses;

namespace OpenAI;

/// <summary>
/// Provides extension methods for <see cref="AgentRunResponse"/> to extract native OpenAI response objects
/// from the Microsoft Extensions AI Agent framework responses.
/// </summary>
/// <remarks>
/// These extensions enable developers to access the underlying OpenAI SDK objects when working with
/// AI agents that are backed by OpenAI services. The methods extract strongly-typed OpenAI responses
/// from the <see cref="AgentRunResponse.RawRepresentation"/> property, providing a bridge between
/// the Microsoft Extensions AI framework and the native OpenAI SDK types.
/// </remarks>
public static class AgentRunResponseExtensions
{
    /// <summary>
    /// Extracts a native OpenAI <see cref="ChatCompletion"/> object from an <see cref="AgentRunResponse"/>.
    /// </summary>
    /// <param name="agentResponse">The agent response containing the raw OpenAI representation.</param>
    /// <returns>The native OpenAI <see cref="ChatCompletion"/> object.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="agentResponse"/> is <see langword="null"/>.</exception>
    /// <exception cref="ArgumentException">
    /// Thrown when the <see cref="AgentRunResponse.RawRepresentation"/> is not a <see cref="ChatCompletion"/> object.
    /// This typically occurs when the agent response was not generated by an OpenAI chat completion service
    /// or when the underlying representation has been modified or corrupted.
    /// </exception>
    /// <remarks>
    /// <para>
    /// This method provides access to the native OpenAI <see cref="ChatCompletion"/> object that was used
    /// to generate the agent response. This is useful when you need to access OpenAI-specific properties
    /// or metadata that are not exposed through the Microsoft Extensions AI abstractions.
    /// </para>
    /// <para>
    /// The method expects that the <see cref="AgentRunResponse.RawRepresentation"/> property contains
    /// a <see cref="ChatCompletion"/> object directly. If the response was generated through a different
    /// OpenAI API (such as the Responses API), use <see cref="AsOpenAIResponse"/> instead.
    /// </para>
    /// </remarks>
    public static ChatCompletion AsChatCompletion(this AgentRunResponse agentResponse)
    {
        Throw.IfNull(agentResponse);

        return agentResponse.RawRepresentation is ChatCompletion chatCompletion
            ? chatCompletion
            : throw new ArgumentException("ChatResponse.RawRepresentation must be a ChatCompletion");
    }

    /// <summary>
    /// Extracts a native OpenAI <see cref="OpenAIResponse"/> object from an <see cref="AgentRunResponse"/>.
    /// </summary>
    /// <param name="agentResponse">The agent response containing the raw OpenAI representation.</param>
    /// <returns>The native OpenAI <see cref="OpenAIResponse"/> object.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="agentResponse"/> is <see langword="null"/>.</exception>
    /// <exception cref="ArgumentException">
    /// Thrown in the following scenarios:
    /// <list type="bullet">
    /// <item><description>When the <see cref="AgentRunResponse.RawRepresentation"/> is not a <see cref="ChatResponse"/> object.</description></item>
    /// <item><description>When the <see cref="ChatResponse.RawRepresentation"/> is not an <see cref="OpenAIResponse"/> object.</description></item>
    /// </list>
    /// This typically occurs when the agent response was not generated by an OpenAI service that uses the Responses API,
    /// or when the underlying representation has been modified or corrupted.
    /// </exception>
    /// <remarks>
    /// <para>
    /// This method provides access to the native OpenAI <see cref="OpenAIResponse"/> object that was used
    /// to generate the agent response. This is useful when working with OpenAI's Responses API and you need
    /// to access OpenAI-specific properties or metadata that are not exposed through the Microsoft Extensions AI abstractions.
    /// </para>
    /// <para>
    /// The method follows a two-level extraction pattern:
    /// <list type="number">
    /// <item><description>First, it extracts a <see cref="ChatResponse"/> from the <see cref="AgentRunResponse.RawRepresentation"/>.</description></item>
    /// <item><description>Then, it extracts an <see cref="OpenAIResponse"/> from the <see cref="ChatResponse.RawRepresentation"/>.</description></item>
    /// </list>
    /// This pattern accommodates the layered architecture where the Microsoft Extensions AI framework wraps OpenAI responses.
    /// </para>
    /// <para>
    /// If the response was generated through the standard OpenAI Chat Completion API (not the Responses API),
    /// use <see cref="AsChatCompletion"/> instead.
    /// </para>
    /// </remarks>
    public static OpenAIResponse AsOpenAIResponse(this AgentRunResponse agentResponse)
    {
        Throw.IfNull(agentResponse);

        if (agentResponse.RawRepresentation is ChatResponse chatResponse)
        {
            return chatResponse.RawRepresentation is OpenAIResponse openAIResponse
                ? openAIResponse
                : throw new ArgumentException("ChatResponse.RawRepresentation must be an OpenAIResponse");
        }
        throw new ArgumentException("AgentRunResponse.RawRepresentation must be a ChatResponse");
    }
}
